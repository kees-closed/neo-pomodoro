#!/bin/bash

declare -r work_time="1500"

# In case you don't want to override these variables interactively
# create ~/.config/neo-pomodoro/neo-pomodoro.conf and modify them.
# E.g. to always have interactive mode: `interactive=1`
break_counter="0"
breaks="4"
interactive="0"
break_time="1800"
config_file="$HOME/.config/$(basename "$0")/$(basename "$0").conf"
command_notify_send="/usr/bin/notify-send"
icon_break_over="face-glasses"
icon_long_break="face-cool"
icon_short_break="face-tired"


usage() {
  printf "This program helps managing time using the Pomodoro technique\n\n"
  printf "Usage: %s [OPTION]\n\n" "${0##*/}"
  printf "Options:\n"
  printf "  -b, --breaks      Sets the amount of short breaks before a long break\n"
  printf "  -i, --interactive Enables interactive options before each break\n"
  printf "  -t, --break-time  Sets the time in minutes for the long breaks\n"
  printf "  -c, --config      Specifies an alternative configuration file\n"
  printf "  -h, --help        Display this help and exit\n"
}


quit_menu() {
  printf -- "--:-- Enter ::= Close menu\n"
  printf -- "--:-- q | Q ::= Stop pomodoro timer\n"
  printf -- "--:-- i | I ::= Start/stop interactive mode\n"
}


break_menu() {
  printf -- "--:-- Enter ::= Start intended break\n"
  printf -- "--:-- s | S ::= Skip intended break\n"
  printf -- "--:-- l | L ::= Start long break\n"
  printf -- "--:-- i | I ::= Stop interactive mode\n"
  printf -- "--:-- [1-9] ::= Set currently taken short breaks\n"
}


trap ctrl_c INT
ctrl_c() {
  printf "\n"
  quit_menu
  while read -rp "--:-- Choose one option: " option; do
    case "$option" in
      "")
        printf -- "--:-- Closed menu\n"
        break
        ;;
      q | Q)
        printf -- "--:-- Pomodoro timer stopped"
        trap - SIGINT
        kill -SIGINT "$$"
        ;;
      i | I)
        interactive=$(( ! interactive ))
        case "$interactive" in
          1)
            printf -- "--:-- Interactive mode now enabled\n"
            break
            ;;
          0)
            printf -- "--:-- Interactive mode now disabled\n"
            break
            ;;
        esac
        ;;
      *)
        printf -- "--:-- %s is an invalid option\n" "$option"
        quit_menu
    esac
  done
}


desktop_notification() {
  local icon="$1"
  local message="$2"

  if (( interactive == 1 )) && [[ "$icon" != "$icon_break_over" ]]; then
    local body="Check prompt"
  fi

  if [[ -x "$command_notify_send" && "$DESKTOP_SESSION" == "gnome" ]]; then
    "$command_notify_send" \
      --urgency="critical" \
      --app-name="Pomodoro" \
      --icon="/usr/share/icons/Adwaita/48x48/emotes/$icon-symbolic.symbolic.png" \
      --category="presence" \
      "$message" \
      "$body"
  fi
}


interactive_prompt() {
  local option

  if (( interactive == 1 )); then
    break_menu
    while read -rp "--:-- Choose one option: " option; do
      case "$option" in
        "")
          printf "%(%R)T Starting break\n" -1
          break
          ;;
        i | I)
          interactive="0"
          printf "%(%R)T Break started, interactive mode disabled\n" -1
          break
          ;;
        l | L)
          if (( break_counter != 0 )); then
            break_counter="0"
            printf "%(%R)T Starting early long break of %s minutes\n" -1 "$(( break_time / 60 ))"
            return 3
          fi
          printf "%(%R)T Starting already intended long break of %s minutes\n" -1 "$(( break_time / 60 ))"
          break
          ;;
        s | S)
          printf -- "--:-- Skipping break\n"
          return 4
          ;;
        [1-9])
          if (( option <= breaks )); then
            break_counter="$option"
            printf -- "--:-- Taken short breaks set to %s\n" "($break_counter/$breaks)"
            break_menu
            continue
          fi
          printf -- "--:-- Taken short breaks cannot be above the maximum short breaks of %s\n" "$breaks"
          break_menu
          ;;
        *)
          printf -- "--:-- %s is an invalid option\n" "$option"
          break_menu
      esac
    done
  fi
}


pomodoro_timer() {
  local timer="$(( $1 / 60 ))"
  wait_minute=1

  for (( minutes=0; minutes <= timer; minutes++ )); do
    local work_left="$(( timer - minutes ))"

    if (( work_left == 0 )); then
      (( break_counter++ ))
      local breaks_taken="$(( breaks - break_counter ))"
      wait_minute=0

      if (( breaks_taken < 0 )); then
        break_counter="0"
        printf "%(%R)T Time to have a long break of %s minutes\n" -1 "$(( break_time / 60 ))"
        desktop_notification "$icon_long_break" "Time to have a long break of $(( break_time / 60 )) minutes"
        interactive_prompt

        case "$?" in
          0) sleep "$break_time";;
          4) continue;;
        esac

      elif (( breaks_taken >= 0 )); then
        printf "%(%R)T Time to have a short break of 5 minutes %s\n" -1 "($break_counter/$breaks)"
        desktop_notification "$icon_short_break" "Time to have a short break of 5 minutes ($break_counter/$breaks)"
        interactive_prompt

        case "$?" in
          0) sleep 300;;
          3) sleep "$break_time";;
          4) continue;;
        esac
      fi

      desktop_notification "$icon_break_over" "Work for $timer minutes"

    elif (( work_left > 0 && (minutes % 10) == 0 )); then
      printf "%(%R)T Work for %s minutes\n" -1 "$work_left"
    fi

    if (( wait_minute == 1 )); then
      sleep 60
    fi
    done
}


while (( $# > 0 )); do
  case "$1" in
    -b | --breaks)
      shift
      breaks="$1"
      if (( breaks < 1 )); then
        printf "Error: The amount of short breaks cannot be less than 1\n\n"
        usage
        exit 1
      fi
      ;;
    -i | --interactive)
      interactive="1"
      ;;
    -t | --break-time)
      shift
      break_time="$(( $1 * 60 ))"
      if (( break_time < 600 )); then
        printf "Error: Long breaks cannot be shorter than 10 minutes\n\n"
        usage
        exit 1
      fi
      ;;
    -c | --config)
      shift
      config_file="$1"
      if ! [[ -r "$config_file" ]]; then
        printf "Error: Alternative config file cannot be read\n\n"
        usage
        exit 1
      fi
      ;;
    *)
      usage
      exit 0
      ;;
  esac
  shift
done


if [[ -r "$config_file" ]]; then
  # shellcheck source=/dev/null
  source "$config_file"
fi

printf -- "--:-- Pomodoro timer started\n"
printf -- "--:-- Press Ctrl-C to open menu\n"

while true; do
  pomodoro_timer "$work_time"
done
